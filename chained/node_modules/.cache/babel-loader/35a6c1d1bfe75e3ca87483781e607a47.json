{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\usuario\\\\desktop\\\\chained\\\\chained\\\\src\\\\Components\\\\Home\\\\Home.js\";\nimport React, { useState, useContext, useEffect, useRef, useCallback } from \"react\";\nimport Styles from \"./Home.module.css\";\nimport { CircularProgress } from \"@material-ui/core\"; //components\n\nimport Card from \"./Card/Card\"; //hooks\n\nimport useHome from \"./useHome\"; //context\n\nimport SearchContext from \"../../SearchContext\";\nimport ImagesContext from \"../../ImagesContext\";\nimport PageNumberContext from \"../../PageNumberContext\"; //issue#2\n\nimport FetchImagesFromApi from \"../FetchImages/FetchImagesFromApi\";\nimport InfiniteScroll from \"../InfiniteScroll/InfiniteScroll\";\n\nconst Home = ({\n  history\n}) => {\n  const {\n    SearchString,\n    setSearchString\n  } = useContext(SearchContext);\n  const [PageNumber, setPageNumber] = useState(1);\n  const {\n    ImgArrContext,\n    setImgArrContext\n  } = useContext(ImagesContext);\n  /* const [imgNumber, setimgNumber] = useState(1);\r\n  //const { Loading, err, ImgArr, hasMore } = useHome(SearchString, imgNumber);\r\n  \n  const observer = useRef();\r\n  const lastImgElement = useCallback(\r\n  \t(node) => {\r\n  \t\tif (Loading) return;\r\n  \t\tif (observer.current) observer.current.disconnect();\r\n  \n  \t\tobserver.current = new IntersectionObserver((entries) => {\r\n  \t\t\tconsole.log(entries);\r\n  \t\t\tif (entries[0].isIntersecting) {\r\n  \t\t\t\tconsole.log(\"visible\");\r\n  \t\t\t\tsetimgNumber((previmgNumber) => previmgNumber + 1);\r\n  \t\t\t}\r\n  \t\t});\r\n  \t\tif (node) {\r\n  \t\t\tobserver.current.observe(node);\r\n  \t\t}\r\n  \t\tconsole.log(node);\r\n  \t},\r\n  \t[Loading]\r\n  );\r\n  console.log(ImgArr);\r\n  */\n\n  return /*#__PURE__*/React.createElement(FetchImagesFromApi, {\n    query: SearchString,\n    imgNumber: PageNumber,\n    render: imgArr => {\n      console.log(imgArr);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 3\n    }\n  });\n};\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/usuario/desktop/chained/chained/src/Components/Home/Home.js"],"names":["React","useState","useContext","useEffect","useRef","useCallback","Styles","CircularProgress","Card","useHome","SearchContext","ImagesContext","PageNumberContext","FetchImagesFromApi","InfiniteScroll","Home","history","SearchString","setSearchString","PageNumber","setPageNumber","ImgArrContext","setImgArrContext","imgArr","console","log"],"mappings":";AAAA,OAAOA,KAAP,IACCC,QADD,EAECC,UAFD,EAGCC,SAHD,EAICC,MAJD,EAKCC,WALD,QAMO,OANP;AAOA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,gBAAT,QAAiC,mBAAjC,C,CAEA;;AACA,OAAOC,IAAP,MAAiB,aAAjB,C,CACA;;AACA,OAAOC,OAAP,MAAoB,WAApB,C,CACA;;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AACA,OAAOC,iBAAP,MAA8B,yBAA9B,C,CACA;;AACA,OAAOC,kBAAP,MAA+B,mCAA/B;AACA,OAAOC,cAAP,MAA2B,kCAA3B;;AACA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAC7B,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAAoChB,UAAU,CAACQ,aAAD,CAApD;AACA,QAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BnB,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM;AAAEoB,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,MAAsCpB,UAAU,CAACS,aAAD,CAAtD;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,sBACC,oBAAC,kBAAD;AACC,IAAA,KAAK,EAAEM,YADR;AAEC,IAAA,SAAS,EAAEE,UAFZ;AAGC,IAAA,MAAM,EAAGI,MAAD,IAAY;AACnBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,KALF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD;AASA,CAtCD;;AAuCA,eAAeR,IAAf","sourcesContent":["import React, {\r\n\tuseState,\r\n\tuseContext,\r\n\tuseEffect,\r\n\tuseRef,\r\n\tuseCallback,\r\n} from \"react\";\r\nimport Styles from \"./Home.module.css\";\r\nimport { CircularProgress } from \"@material-ui/core\";\r\n\r\n//components\r\nimport Card from \"./Card/Card\";\r\n//hooks\r\nimport useHome from \"./useHome\";\r\n//context\r\nimport SearchContext from \"../../SearchContext\";\r\nimport ImagesContext from \"../../ImagesContext\";\r\nimport PageNumberContext from \"../../PageNumberContext\";\r\n//issue#2\r\nimport FetchImagesFromApi from \"../FetchImages/FetchImagesFromApi\";\r\nimport InfiniteScroll from \"../InfiniteScroll/InfiniteScroll\";\r\nconst Home = ({ history }) => {\r\n\tconst { SearchString, setSearchString } = useContext(SearchContext);\r\n\tconst [PageNumber, setPageNumber] = useState(1);\r\n\tconst { ImgArrContext, setImgArrContext } = useContext(ImagesContext);\r\n\t/* const [imgNumber, setimgNumber] = useState(1);\r\n\t//const { Loading, err, ImgArr, hasMore } = useHome(SearchString, imgNumber);\r\n\r\n\tconst observer = useRef();\r\n\tconst lastImgElement = useCallback(\r\n\t\t(node) => {\r\n\t\t\tif (Loading) return;\r\n\t\t\tif (observer.current) observer.current.disconnect();\r\n\r\n\t\t\tobserver.current = new IntersectionObserver((entries) => {\r\n\t\t\t\tconsole.log(entries);\r\n\t\t\t\tif (entries[0].isIntersecting) {\r\n\t\t\t\t\tconsole.log(\"visible\");\r\n\t\t\t\t\tsetimgNumber((previmgNumber) => previmgNumber + 1);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tif (node) {\r\n\t\t\t\tobserver.current.observe(node);\r\n\t\t\t}\r\n\t\t\tconsole.log(node);\r\n\t\t},\r\n\t\t[Loading]\r\n\t);\r\n\tconsole.log(ImgArr);\r\n */\r\n\treturn (\r\n\t\t<FetchImagesFromApi\r\n\t\t\tquery={SearchString}\r\n\t\t\timgNumber={PageNumber}\r\n\t\t\trender={(imgArr) => {\r\n\t\t\t\tconsole.log(imgArr);\r\n\t\t\t}}\r\n\t\t></FetchImagesFromApi>\r\n\t);\r\n};\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}