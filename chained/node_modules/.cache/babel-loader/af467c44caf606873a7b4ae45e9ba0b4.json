{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\usuario\\\\desktop\\\\chained\\\\chained\\\\src\\\\Components\\\\Home\\\\Home.js\";\nimport React, { useState, useContext, useEffect, useRef, useCallback } from \"react\";\nimport Styles from \"./Home.module.css\";\nimport { CircularProgress } from \"@material-ui/core\"; //components\n\nimport Card from \"./Card/Card\"; //hooks\n\nimport useHome from \"./useHome\"; //context\n\nimport SearchContext from \"../../SearchContext\";\nimport ImagesContext from \"../../ImagesContext\"; //issue#2\n\nimport FetchImagesFromApi from \"../FetchImages/FetchImagesFromApi\";\nimport InfiniteScroll from \"../InfiniteScroll/InfiniteScroll\";\n\nconst Home = ({\n  history\n}) => {\n  const {\n    SearchString,\n    setSearchString\n  } = useContext(SearchContext);\n  /* const [imgNumber, setimgNumber] = useState(1);\r\n  //const { Loading, err, ImgArr, hasMore } = useHome(SearchString, imgNumber);\r\n  \n  const observer = useRef();\r\n  const lastImgElement = useCallback(\r\n  \t(node) => {\r\n  \t\tif (Loading) return;\r\n  \t\tif (observer.current) observer.current.disconnect();\r\n  \n  \t\tobserver.current = new IntersectionObserver((entries) => {\r\n  \t\t\tconsole.log(entries);\r\n  \t\t\tif (entries[0].isIntersecting) {\r\n  \t\t\t\tconsole.log(\"visible\");\r\n  \t\t\t\tsetimgNumber((previmgNumber) => previmgNumber + 1);\r\n  \t\t\t}\r\n  \t\t});\r\n  \t\tif (node) {\r\n  \t\t\tobserver.current.observe(node);\r\n  \t\t}\r\n  \t\tconsole.log(node);\r\n  \t},\r\n  \t[Loading]\r\n  );\r\n  console.log(ImgArr);\r\n  */\n\n  return /*#__PURE__*/React.createElement(FetchImagesFromApi, {\n    query: SearchString,\n    imgNumber: imgNumber,\n    render: (Loading, Err, ImgArr, hasMore) => {\n      console.log(\"hola\", ImgArr);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: Styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 6\n        }\n      }, Loading && /*#__PURE__*/React.createElement(\"div\", {\n        className: Styles.loadingContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 8\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        className: Styles.Loading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }\n      }, \"Loading...\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: Styles.CardContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 7\n        }\n      }, ImgArr.map((img, index) => {\n        if (ImgArr.length === index + 1) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            ref: lastImgElement,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(Card, {\n            key: img.id,\n            src: img.largeImageURL,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 12\n            }\n          }));\n        } else {\n          return /*#__PURE__*/React.createElement(Card, {\n            history: history,\n            key: img.id,\n            src: img.largeImageURL,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 11\n            }\n          });\n        }\n      })), \");\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 3\n    }\n  });\n};\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/usuario/desktop/chained/chained/src/Components/Home/Home.js"],"names":["React","useState","useContext","useEffect","useRef","useCallback","Styles","CircularProgress","Card","useHome","SearchContext","ImagesContext","FetchImagesFromApi","InfiniteScroll","Home","history","SearchString","setSearchString","imgNumber","Loading","Err","ImgArr","hasMore","console","log","container","loadingContainer","CardContainer","map","img","index","length","lastImgElement","id","largeImageURL"],"mappings":";AAAA,OAAOA,KAAP,IACCC,QADD,EAECC,UAFD,EAGCC,SAHD,EAICC,MAJD,EAKCC,WALD,QAMO,OANP;AAOA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,gBAAT,QAAiC,mBAAjC,C,CAEA;;AACA,OAAOC,IAAP,MAAiB,aAAjB,C,CACA;;AACA,OAAOC,OAAP,MAAoB,WAApB,C,CACA;;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AACA,OAAOC,aAAP,MAA0B,qBAA1B,C,CAEA;;AACA,OAAOC,kBAAP,MAA+B,mCAA/B;AACA,OAAOC,cAAP,MAA2B,kCAA3B;;AACA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAC7B,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAAoCf,UAAU,CAACQ,aAAD,CAApD;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,sBACC,oBAAC,kBAAD;AACC,IAAA,KAAK,EAAEM,YADR;AAEC,IAAA,SAAS,EAAEE,SAFZ;AAGC,IAAA,MAAM,EAAE,CAACC,OAAD,EAAUC,GAAV,EAAeC,MAAf,EAAuBC,OAAvB,KAAmC;AAC1CC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBH,MAApB;AACA,0BACC;AAAK,QAAA,SAAS,EAAEf,MAAM,CAACmB,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACEN,OAAO,iBACP;AAAK,QAAA,SAAS,EAAEb,MAAM,CAACoB,gBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACC;AAAI,QAAA,SAAS,EAAEpB,MAAM,CAACa,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADD,CAFF,eAMC;AAAK,QAAA,SAAS,EAAEb,MAAM,CAACqB,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACEN,MAAM,CAACO,GAAP,CAAW,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC3B,YAAIT,MAAM,CAACU,MAAP,KAAkBD,KAAK,GAAG,CAA9B,EAAiC;AAChC,8BACC;AAAK,YAAA,GAAG,EAAEE,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACC,oBAAC,IAAD;AAAM,YAAA,GAAG,EAAEH,GAAG,CAACI,EAAf;AAAmB,YAAA,GAAG,EAAEJ,GAAG,CAACK,aAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,CADD;AAKA,SAND,MAMO;AACN,8BACC,oBAAC,IAAD;AACC,YAAA,OAAO,EAAEnB,OADV;AAEC,YAAA,GAAG,EAAEc,GAAG,CAACI,EAFV;AAGC,YAAA,GAAG,EAAEJ,GAAG,CAACK,aAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD;AAOA;AACD,OAhBA,CADF,CAND,OADD;AA6BA,KAlCF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD;AAsCA,CAlED;;AAmEA,eAAepB,IAAf","sourcesContent":["import React, {\r\n\tuseState,\r\n\tuseContext,\r\n\tuseEffect,\r\n\tuseRef,\r\n\tuseCallback,\r\n} from \"react\";\r\nimport Styles from \"./Home.module.css\";\r\nimport { CircularProgress } from \"@material-ui/core\";\r\n\r\n//components\r\nimport Card from \"./Card/Card\";\r\n//hooks\r\nimport useHome from \"./useHome\";\r\n//context\r\nimport SearchContext from \"../../SearchContext\";\r\nimport ImagesContext from \"../../ImagesContext\";\r\n\r\n//issue#2\r\nimport FetchImagesFromApi from \"../FetchImages/FetchImagesFromApi\";\r\nimport InfiniteScroll from \"../InfiniteScroll/InfiniteScroll\";\r\nconst Home = ({ history }) => {\r\n\tconst { SearchString, setSearchString } = useContext(SearchContext);\r\n\r\n\t/* const [imgNumber, setimgNumber] = useState(1);\r\n\t//const { Loading, err, ImgArr, hasMore } = useHome(SearchString, imgNumber);\r\n\r\n\tconst observer = useRef();\r\n\tconst lastImgElement = useCallback(\r\n\t\t(node) => {\r\n\t\t\tif (Loading) return;\r\n\t\t\tif (observer.current) observer.current.disconnect();\r\n\r\n\t\t\tobserver.current = new IntersectionObserver((entries) => {\r\n\t\t\t\tconsole.log(entries);\r\n\t\t\t\tif (entries[0].isIntersecting) {\r\n\t\t\t\t\tconsole.log(\"visible\");\r\n\t\t\t\t\tsetimgNumber((previmgNumber) => previmgNumber + 1);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tif (node) {\r\n\t\t\t\tobserver.current.observe(node);\r\n\t\t\t}\r\n\t\t\tconsole.log(node);\r\n\t\t},\r\n\t\t[Loading]\r\n\t);\r\n\tconsole.log(ImgArr);\r\n */\r\n\treturn (\r\n\t\t<FetchImagesFromApi\r\n\t\t\tquery={SearchString}\r\n\t\t\timgNumber={imgNumber}\r\n\t\t\trender={(Loading, Err, ImgArr, hasMore) => {\r\n\t\t\t\tconsole.log(\"hola\", ImgArr);\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div className={Styles.container}>\r\n\t\t\t\t\t\t{Loading && (\r\n\t\t\t\t\t\t\t<div className={Styles.loadingContainer}>\r\n\t\t\t\t\t\t\t\t<h1 className={Styles.Loading}>Loading...</h1>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t<div className={Styles.CardContainer}>\r\n\t\t\t\t\t\t\t{ImgArr.map((img, index) => {\r\n\t\t\t\t\t\t\t\tif (ImgArr.length === index + 1) {\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<div ref={lastImgElement}>\r\n\t\t\t\t\t\t\t\t\t\t\t<Card key={img.id} src={img.largeImageURL}></Card>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<Card\r\n\t\t\t\t\t\t\t\t\t\t\thistory={history}\r\n\t\t\t\t\t\t\t\t\t\t\tkey={img.id}\r\n\t\t\t\t\t\t\t\t\t\t\tsrc={img.largeImageURL}\r\n\t\t\t\t\t\t\t\t\t\t></Card>\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t</div>\r\n\t\t\t\t);\r\n\t\t\t}}\r\n\t\t></FetchImagesFromApi>\r\n\t);\r\n};\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}