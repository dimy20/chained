{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\usuario\\\\desktop\\\\chained\\\\chained\\\\src\\\\Components\\\\Homev2\\\\QuotesGrid\\\\QuotesGrid.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Card from \"../../Card/Card\";\nimport Styles from \"./QuotesGrid.module.css\";\nexport default function QuotesColumns(props) {\n  const [quotes, setQuotes] = useState([]);\n  useEffect(() => {\n    let unmounted = false;\n    fetch(\"http://localhost:5000/quote/id/5f1d4804e7eb5251e0ee55a8\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      res.json().then(data => {\n        if (!unmounted) {\n          setQuotes([...quotes, data.quote]);\n        }\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n    return () => {\n      unmounted = true;\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: Styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, quotes.map((q, index) => {\n    return /*#__PURE__*/React.createElement(Card, {\n      user: q.user,\n      key: index,\n      redirectTo: \"/user\",\n      username: q.author,\n      quote: `“${q.quote}”`,\n      tag: \"Love\",\n      quoteTittle: q.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 8\n      }\n    });\n  })), console.log(quotes));\n}","map":{"version":3,"sources":["C:/Users/usuario/desktop/chained/chained/src/Components/Homev2/QuotesGrid/QuotesGrid.js"],"names":["React","useState","useEffect","Card","Styles","QuotesColumns","props","quotes","setQuotes","unmounted","fetch","method","headers","then","res","json","data","quote","catch","err","console","log","container","map","q","index","user","author","title"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AAEA,eAAe,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,EAAD,CAApC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACf,QAAIO,SAAS,GAAG,KAAhB;AACAC,IAAAA,KAAK,CAAC,yDAAD,EAA4D;AAChEC,MAAAA,MAAM,EAAE,KADwD;AAEhEC,MAAAA,OAAO,EAAE;AACR,wBAAgB;AADR;AAFuD,KAA5D,CAAL,CAMEC,IANF,CAMQC,GAAD,IAAS;AACdA,MAAAA,GAAG,CAACC,IAAJ,GAAWF,IAAX,CAAiBG,IAAD,IAAU;AACzB,YAAI,CAACP,SAAL,EAAgB;AACfD,UAAAA,SAAS,CAAC,CAAC,GAAGD,MAAJ,EAAYS,IAAI,CAACC,KAAjB,CAAD,CAAT;AACA;AACD,OAJD;AAKA,KAZF,EAaEC,KAbF,CAaSC,GAAD,IAAS;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,KAfF;AAiBA,WAAO,MAAM;AACZV,MAAAA,SAAS,GAAG,IAAZ;AACA,KAFD;AAGA,GAtBQ,EAsBN,EAtBM,CAAT;AAuBA,sBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAK,IAAA,SAAS,EAAEL,MAAM,CAACkB,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEf,MAAM,CAACgB,GAAP,CAAW,CAACC,CAAD,EAAIC,KAAJ,KAAc;AACzB,wBACC,oBAAC,IAAD;AACC,MAAA,IAAI,EAAED,CAAC,CAACE,IADT;AAEC,MAAA,GAAG,EAAED,KAFN;AAGC,MAAA,UAAU,EAAC,OAHZ;AAIC,MAAA,QAAQ,EAAED,CAAC,CAACG,MAJb;AAKC,MAAA,KAAK,EAAG,IAAGH,CAAC,CAACP,KAAM,GALpB;AAMC,MAAA,GAAG,EAAC,MANL;AAOC,MAAA,WAAW,EAAEO,CAAC,CAACI,KAPhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD;AAWA,GAZA,CADF,CAFF,EAmBER,OAAO,CAACC,GAAR,CAAYd,MAAZ,CAnBF,CADD;AAuBA","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Card from \"../../Card/Card\";\r\nimport Styles from \"./QuotesGrid.module.css\";\r\n\r\nexport default function QuotesColumns(props) {\r\n\tconst [quotes, setQuotes] = useState([]);\r\n\tuseEffect(() => {\r\n\t\tlet unmounted = false;\r\n\t\tfetch(\"http://localhost:5000/quote/id/5f1d4804e7eb5251e0ee55a8\", {\r\n\t\t\tmethod: \"GET\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t},\r\n\t\t})\r\n\t\t\t.then((res) => {\r\n\t\t\t\tres.json().then((data) => {\r\n\t\t\t\t\tif (!unmounted) {\r\n\t\t\t\t\t\tsetQuotes([...quotes, data.quote]);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t});\r\n\r\n\t\treturn () => {\r\n\t\t\tunmounted = true;\r\n\t\t};\r\n\t}, []);\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\t<div className={Styles.container}>\r\n\t\t\t\t\t{quotes.map((q, index) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<Card\r\n\t\t\t\t\t\t\t\tuser={q.user}\r\n\t\t\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\t\t\tredirectTo=\"/user\"\r\n\t\t\t\t\t\t\t\tusername={q.author}\r\n\t\t\t\t\t\t\t\tquote={`“${q.quote}”`}\r\n\t\t\t\t\t\t\t\ttag=\"Love\"\r\n\t\t\t\t\t\t\t\tquoteTittle={q.title}\r\n\t\t\t\t\t\t\t></Card>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t{/* <Redirect to=\"/user\"></Redirect> */}\r\n\t\t\t{console.log(quotes)}\r\n\t\t</div>\r\n\t);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}